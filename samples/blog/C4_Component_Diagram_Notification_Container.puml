@startuml C4 Component Diagram - Notification Container

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include DEVICONS/postgresql.puml
!include FONTAWESOME/envelope.puml
!include <logos/kafka>

AddRelTag("event", $lineStyle = DashedLine())

SHOW_PERSON_OUTLINE()
'LAYOUT_LEFT_RIGHT()
LAYOUT_TOP_DOWN()
'LAYOUT_AS_SKETCH()
'LAYOUT_WITH_LEGEND()

title System Component diagram for Notification Container

Person_Ext(reader, "Reader", "A reader for published posts by writers.")
System_Ext(mailSystem, "E-mail system", "The internal Microsoft Exchange e-mail system.")
ContainerQueue(messageBroker, "Message Broker", "Kafka", "Distributed data store optimized for ingesting and processing streaming data in real-time.", "kafka")

Container_Boundary(notificationContainer, "Notification Microservice"){
  Component(kafkaConsumer, "Kafka Consumer", "Spring Cloud", "Kafka Consumer implementation to fecth Posts from Message Broker")
  Component(notificationService, "Notification Service", "Spring", "Service that implement an interface to send notifications")
  Component(emailClient, "Email Client", "Microsoft Exchange", "Client to send notifications to Microsoft Exchage Server")

  Rel_L(kafkaConsumer, notificationService, "Uses")
  Rel_D(notificationService, emailClient, "Uses")
}

Rel_D(messageBroker, kafkaConsumer, "Consume Post", "Kafka", $tags="event")
Rel_Neighbor(emailClient, mailSystem, "Sends Notification", "async,https")
Rel_Back(reader, mailSystem, "Sends Notification to", "SMTP")

@enduml
